@startuml Add Review

participant endpoint [
    =reviewsController
    ----
    /createReview
]

participant addReview [
    =reviewsHandler
    ----
    addReview()
]

participant validateBySchema [
    =utils.js
    ----
    validateBySchema()
]

participant getPlaceByPlaceId [
    =placesDatabaseAccess
    ----
    getPlaceByPlaceId()
]

participant updatePlaceAndAddReview [
    =reviewsHandler
    ----
    updatePlaceAndAddReview()
]

participant recalculateRatingsForAddingReviewToPlace [
    =placesUtils
    ----
    recalculateRatingsForAddingReviewToPlace()
]

participant transactionUpdatePlaceAndAddReview [
    =transactionDatabaseAccess
    ----
    transactionUpdatePlaceAndAddReview
]

== Add Review For New Place ==
endpoint -> addReview: create review
addReview -> validateBySchema: is review valid?
alt review is not valid
    validateBySchema -> addReview: review is not valid
    addReview -> endpoint: return BadSchemaReponse
end
validateBySchema -> addReview: review is valid
addReview -> getPlaceByPlaceId: get place with review.placeId
alt DBError
    getPlaceByPlaceId -> addReview: Error encountered
    addReview -> endpoint: return AWSErrorResponse
end
getPlaceByPlaceId -> addReview: placeExists: TRUE
addReview -> updatePlaceAndAddReview: update place and add review
updatePlaceAndAddReview -> recalculateRatingsForAddingReviewToPlace: place
recalculateRatingsForAddingReviewToPlace -> updatePlaceAndAddReview: place with updated values
updatePlaceAndAddReview -> validateBySchema: is place valid?
alt place is not valid
    validateBySchema -> updatePlaceAndAddReview: place is not valid
    updatePlaceAndAddReview -> addReview: return BadSchemaReponse
    addReview -> endpoint: return BadSchemaReponse
end
validateBySchema -> updatePlaceAndAddReview: place is valid
updatePlaceAndAddReview -> transactionUpdatePlaceAndAddReview: updated place and add review
transactionUpdatePlaceAndAddReview -> updatePlaceAndAddReview: response
updatePlaceAndAddReview -> addReview: response
addReview -> endpoint: response
