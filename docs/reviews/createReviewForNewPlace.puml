@startuml Add Review

participant endpoint [
    =reviewsController
    ----
    /createReview
]

participant addReview [
    =reviewsHandler
    ----
    addReview()
]

participant validateBySchema [
    =utils.js
    ----
    validateBySchema()
]

participant getPlaceByPlaceId [
    =placesDatabaseAccess
    ----
    getPlaceByPlaceId()
]

participant addPlaceAndAddReview [
    =reviewsHandler
    ----
    addPlaceAndAddReview()
]

participant addReviewForNewPlace [
    =reviewsHandler
    ----
    addReviewForNewPlace()
]

participant createNewPlaceFromReview [
    =placesUtils
    ----
    createNewPlaceFromReview()
]

participant transactionAddPlaceAndAddReview [
    =transactionDatabaseAccess
    ----
    transactionAddPlaceAndAddReview()
]

== Add Review For New Place ==
endpoint -> addReview: create review
addReview -> validateBySchema: is review valid?
alt review is not valid
    validateBySchema -> addReview: review is not valid
    addReview -> endpoint: return BadSchemaReponse
end
validateBySchema -> addReview: review is valid
addReview -> getPlaceByPlaceId: get place with review.placeId
alt DBError
    getPlaceByPlaceId -> addReview: Error encountered
    addReview -> endpoint: return AWSErrorResponse
end
getPlaceByPlaceId -> addReview: placeExists: false
addReview -> addPlaceAndAddReview: create place, add place, and add review
addPlaceAndAddReview -> createNewPlaceFromReview: create place from review
createNewPlaceFromReview -> addPlaceAndAddReview: place
addPlaceAndAddReview -> validateBySchema: is place valid?
alt review is not valid
    validateBySchema -> addPlaceAndAddReview: place is not valid
    addPlaceAndAddReview -> addReview: return BadSchemaReponse
    addReview -> endpoint: return BadSchemaReponse
end
validateBySchema -> addPlaceAndAddReview: place is valid
addPlaceAndAddReview -> transactionAddPlaceAndAddReview: add place and add review
transactionAddPlaceAndAddReview -> addPlaceAndAddReview: response
addPlaceAndAddReview -> addReview: response
addReview -> endpoint: response
